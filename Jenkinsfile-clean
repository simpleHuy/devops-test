pipeline {
    agent any

    stages {
        stage('Initialize Kubeconfig and Namespace') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        def userId = currentBuild.getBuildCauses()
                            .find { it._class.contains('UserIdCause') }?.userId ?: 'anonymous'
                        def dynamicNamespace = "${userId}-dev-review"
                        echo "Using namespace: ${dynamicNamespace}"

                        sh """
                            echo "Setting up kubeconfig..."
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            kubectl config get-contexts
                        """

                        env.NAMESPACE = dynamicNamespace
                    }
                }
            }
        }

        stage('Verify Cluster Access') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        withEnv(["NAMESPACE=${env.NAMESPACE}"]) {
                            sh '''
                                export KUBECONFIG=$KUBECONFIG_FILE
                                echo "Verifying access to Kubernetes cluster..."
                                kubectl cluster-info
                                kubectl get ns $NAMESPACE
                            '''
                        }
                    }
                }
            }
        }

        stage('Delete k8s Resources') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        withEnv(["NAMESPACE=${env.NAMESPACE}"]) {
                            sh '''
                                export KUBECONFIG=$KUBECONFIG_FILE
                                echo "Deleting all in namespace $NAMESPACE..."
                                kubectl delete all --all -n $NAMESPACE || echo "Nothing to delete."
                            '''
                        }
                    }
                }
            }
        }

        stage('Cleanup Complete') {
            steps {
                echo "leanup completed in namespace: ${env.NAMESPACE}"
            }
        }
    }

    post {
        failure {
            echo "An error occurred during cleanup in namespace: ${env.NAMESPACE}"
        }
    }
}
