pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    ARGO_CREDENTIALS = credentials('argocd')
    ARGO_SERVER = 'argocd.devops'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Checkout GitOps Repo') {
      steps {
        dir('gitops-config') {
          git url: 'https://github.com/simpleHuy/spring-petclinic-infra', branch: 'master'
        }
      }
    }

    stage('Detect Changed Services') {
      steps {
        script {
          def diffFiles = sh(
            script: "git diff --name-only HEAD~1 HEAD",
            returnStdout: true
          ).trim().split('\n')

          def services = [
            'spring-petclinic-admin-server',
            'spring-petclinic-api-gateway',
            'spring-petclinic-config-server',
            'spring-petclinic-customers-service',
            'spring-petclinic-discovery-server',
            'spring-petclinic-genai-service',
            'spring-petclinic-vets-service',
            'spring-petclinic-visits-service'
          ]

          def changedServices = services.findAll { service ->
            diffFiles.any { file -> file.startsWith(service + "/") }
          }

          if (changedServices.isEmpty()) {
            echo "No service changes detected."
            currentBuild.result = 'SUCCESS'
            return
          }

          env.CHANGED_SERVICES = changedServices.join(',')
          echo "Changed services: ${env.CHANGED_SERVICES}"
        }
      }
    }

    stage('Build and Push Docker Images') {
      steps {
        script {
          def changedServices = env.CHANGED_SERVICES.split(',')
          withCredentials([usernamePassword(
              credentialsId: 'dockerhub',
              usernameVariable: 'DOCKER_USERNAME',
              passwordVariable: 'DOCKER_PASSWORD'
          )]) {
              sh "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin"

              for (service in changedServices) {
                  echo "Building Docker image for ${service}"

                  dir("${service}") {
                      sh "../mvnw clean install -P buildDocker -Ddocker.image.prefix=${REPOSITORY_PREFIX} -DskipTests"
                  }

                  sh """
                      docker tag ${REPOSITORY_PREFIX}/${service} ${REPOSITORY_PREFIX}/${service}:latest
                      docker push ${REPOSITORY_PREFIX}/${service}:latest
                  """
              }
          }
        }
      }
    }

    stage('Sync Argo CD') {
      steps {
        sh """
          argocd login \$ARGO_SERVER --username \$ARGO_CREDENTIALS_USR --password \$ARGO_CREDENTIALS_PSW --insecure
          argocd app sync devops-dev-test
        """
      }
    }
  }
}
