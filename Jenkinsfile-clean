pipeline {
    agent any

    environment {
        NAMESPACE = "dev-review" // default, s·∫Ω ƒë∆∞·ª£c ghi ƒë√® trong script
    }

    options {
        timestamps()
    }

    stages {
        stage('Initialize Kubeconfig and Namespace') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        // L·∫•y th√¥ng tin user trigger job
                        def userId = currentBuild.getBuildCauses()
                            .find { it._class.contains('UserIdCause') }?.userId ?: 'anonymous'
                        // G√°n l·∫°i namespace cho to√†n pipeline
                        env.NAMESPACE = "${userId}-dev-review"
                        echo "‚úÖ Using namespace: ${env.NAMESPACE}"

                        sh """
                            echo "üîß Setting up kubeconfig..."
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            kubectl config get-contexts
                        """
                    }
                }
            }
        }

        stage('Verify Cluster Access') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["NAMESPACE=${env.NAMESPACE}"]) {
                        sh '''
                            export KUBECONFIG=$KUBECONFIG_FILE
                            echo "üîç Verifying access to Kubernetes cluster..."
                            kubectl cluster-info
                            kubectl get ns $NAMESPACE
                        '''
                    }
                }
            }
        }

        stage('Delete k8s Resources') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["NAMESPACE=${env.NAMESPACE}"]) {
                        sh '''
                            export KUBECONFIG=$KUBECONFIG_FILE
                            echo "üßπ Deleting all in namespace $NAMESPACE..."
                            kubectl delete all --all -n $NAMESPACE || echo "üü° Nothing to delete."
                        '''
                    }
                }
            }
        }

        stage('Cleanup Complete') {
            steps {
                echo "‚úÖ Cleanup completed in namespace: ${env.NAMESPACE}"
            }
        }
    }

    post {
        failure {
            echo "‚ùå An error occurred during cleanup in namespace: ${env.NAMESPACE}"
        }
    }
}