pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "sciderus"
        NAMESPACE = "dev-review"
    }

    parameters {
        string(name: 'admin-server', defaultValue: 'main', description: 'Branch for admin server')
        string(name: 'api-gateway', defaultValue: 'main', description: 'Branch for API gateway')
        string(name: 'vets-service', defaultValue: 'main', description: 'Branch for vets service')
        string(name: 'visits-service', defaultValue: 'main', description: 'Branch for visits service')
        string(name: 'owners-service', defaultValue: 'main', description: 'Branch for owners/customers service')
        string(name: 'config-server', defaultValue: 'main', description: 'Branch for config server')
        string(name: 'discovery-server', defaultValue: 'main', description: 'Branch for discovery server')
    }

    def services = [
        [name: "spring-petclinic-admin-server",     branch: params['admin-server']],
        [name: "spring-petclinic-api-gateway",      branch: params['api-gateway']],
        [name: "spring-petclinic-vets-service",     branch: params['vets-service']],
        [name: "spring-petclinic-visits-service",   branch: params['visits-service']],
        [name: "spring-petclinic-customers-service",branch: params['owners-service']],
        [name: "spring-petclinic-config-server",    branch: params['config-server']],
        [name: "spring-petclinic-discovery-server", branch: params['discovery-server']]
    ]

    stages {
        stage('test minikube') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = "${KUBECONFIG_FILE}"
                        sh "kubectl get nodes"
                    }
                }
            }
        }

        stage('Generate and Apply Kubernetes YAMLs') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = "${KUBECONFIG_FILE}"

                        sh "kubectl get ns dev-review || kubectl create ns dev-review"

                        services.each { svc ->
                            echo "Deploying service: ${svc.name} on branch ${svc.branch}"

                            def SERVICE_NAME = svc.name
                            def CONTAINER_NAME = SERVICE_NAME.replaceFirst("spring-petclinic-", "")
                            def BRANCH = svc.branch
                            def IMAGE_TAG = 'latest'
                            if(BRANCH != 'main'){
                                IMAGE_TAG = 'something-else'
                            }
                            def CONTAINER_PORT = guessPortFromServiceName(SERVICE_NAME)

                            withEnv([
                                "SERVICE_NAME=${SERVICE_NAME}",
                                "CONTAINER_NAME=${CONTAINER_NAME}",
                                "IMAGE_TAG=${IMAGE_TAG}",
                                "CONTAINER_PORT=${CONTAINER_PORT}",
                                "NAMESPACE=${env.NAMESPACE}"
                            ]) {
                                sh """
                                envsubst < k8s/deployment.tpl.yaml > ${SERVICE_NAME}-deployment.yaml
                                envsubst < k8s/service.tpl.yaml > ${SERVICE_NAME}-service.yaml

                                kubectl apply -f ${SERVICE_NAME}-deployment.yaml -n ${NAMESPACE}
                                kubectl apply -f ${SERVICE_NAME}-service.yaml -n ${NAMESPACE}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Show Access Info') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        def workerIP = sh(
                            script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}'",
                            returnStdout: true
                        ).trim()

                        services.each { svc ->
                            svc = svc.replaceFirst("spring-petclinic-", "")
                            def nodePort = sh(
                                script: "kubectl get svc ${svc} -n ${namespace} -o jsonpath='{.spec.ports[0].nodePort}'",
                                returnStdout: true
                            ).trim()

                            echo "${svc} is accessible at: http://${workerIP}:${nodePort}"
                            echo "â†’ Add to /etc/hosts: ${workerIP}    ${svc}.local"
                        }
                    }
                }       
            }
        }
    }
}

def guessPortFromServiceName(name) {
    if (name.contains("admin")) return "9090"
    if (name.contains("gateway")) return "8080"
    if (name.contains("vets")) return "8081"
    if (name.contains("visits")) return "8082"
    if (name.contains("customers")) return "8083"
    if (name.contains("config")) return "8888"
    if (name.contains("discovery")) return "8761"
    return "8080" // default fallback
}